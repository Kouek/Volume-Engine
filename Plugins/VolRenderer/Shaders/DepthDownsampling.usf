#include "/Engine/Public/Platform.ush"

int2 DepthTextureSize;
float4 InvDeviceZToWorldZTransform;
SamplerState DepthSamplerState;
Texture2D<float> InDepthTexture;
RWTexture2D<float> OutDepthTexture;

[numthreads(THREAD_PER_GROUP_X, THREAD_PER_GROUP_Y, THREAD_PER_GROUP_Z)]
void Main(int3 DispatchThreadID : SV_DispatchThreadID) {
    if (DispatchThreadID.x >= DepthTextureSize.x || DispatchThreadID.y >= DepthTextureSize.y)
        return;
    
#if DIM_LOD == 0
    float ReversedDepth = InDepthTexture.Load(DispatchThreadID);
#else
    float2 InDepthSize;
    uint Tmp;
    InDepthTexture.GetDimensions(DIM_LOD - 1, InDepthSize.x, InDepthSize.y, Tmp);
    float ReversedDepth = InDepthTexture.SampleLevel(DepthSamplerState, float2(DispatchThreadID.xy) / (InDepthSize - 1.f), DIM_LOD - 1);
#endif
    
    OutDepthTexture[DispatchThreadID.xy] = ReversedDepth * InvDeviceZToWorldZTransform[0] + InvDeviceZToWorldZTransform[1] + 1.f / (ReversedDepth * InvDeviceZToWorldZTransform[2] - InvDeviceZToWorldZTransform[3]);
}
